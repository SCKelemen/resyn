INSTANTIATE <a> . <q2 :: a -> a -> Int> . <q1 :: a -> Int> . {List {1**a||0} <q1 _0> <q2 _0 _1>|_v == (Nil)|0}
INTO {List {1**A0||0} <Q10 _0> <Q20 _0 _1>|_v == (Nil)|0}
INSTANTIATE <a> . <q2 :: a -> a -> Int> . <q1 :: a -> Int> . x:{1**a||q1 _v} -> xs:{List {1**a||0} <q1 _0 + q2 x _0> <q2 _0 _1>||0} -> {List {1**a||0} <q1 _0> <q2 _0 _1>|_v == (Cons x xs)|0}
INTO y:{1**A1||Q11 _v} -> ys:{List {1**A1||0} <Q11 _0 + Q21 y _0> <Q21 _0 _1>||0} -> {List {1**A1||0} <Q11 _0> <Q21 _0 _1>|_v == (Cons y ys)|0}

 
 Checking xs :: {List {1**A0||0} <0> <0>||0} in
\xs . 
  match ?? with
from env with top-level potentials: Emptyset : 0,Nil : 0,xs : 0 fp2
Typing Constraints
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs |- {List {m0**a||0} <2> <2>|_v == xs|0} <: {List {1**A0||0} <0> <0>||0}
    Emptyset Nil xs ~ Emptyset Nil xs fp2
    Emptyset Nil xs 0 \/
    Emptyset Nil xs 0 || Emptyset Nil xs 0
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs |- 0 \/ fp0 || fp1
    |- Q11 :: A1 -> Int
    |- Q21 :: A1 -> A1 -> Int
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs |- {1**A1||0}
    |- Q10 :: A0 -> Int
    |- Q20 :: A0 -> A0 -> Int
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs |- {1**A0||0}
UNIFY A0 WITH {m0**a||0} PRODUCING {m0**a|U0|0}
Type assignment
  A0 -> {m0**a|U0|0}
Typing Constraints
    |- Q20 :: A0 -> A0 -> Int
    |- Q10 :: A0 -> Int
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs |- {1**A1||0}
    |- Q21 :: A1 -> A1 -> Int
    |- Q11 :: A1 -> Int
Type assignment
  A0 -> {m0**a|U0|0}
Pred assignment
  Q10 -> Q10
  Q11 -> Q11
  Q20 -> Q20
  Q21 -> Q21
Simple Constraints
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs |- {m0**a||0} <: {m0**a|U0|0}
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs |- 2 >= 0
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs |- 2 >= 0
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs |- {List|False|0} <: {List||0}
    Emptyset Nil xs ~ Emptyset Nil xs fp2
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs |- 1 \/ m0 || m1
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs |- 0 \/ fp0 || fp1
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs |- {m0**a|U0|0}
Constraints
  False ==> True
  True ==> U0
QMap
  U0 -> {}
Checking consistency
Candidates (1)
  0: [U0 -> {}] (2 0)
Remaining Candidates (1)
  0: [U0 -> {}] (2 0)

Generating resource constraints:
    2 >= 0
    2 >= 0
    (((((0 + fp0) + 0 == (0 + fp2) + 0 && fp0 >= 0) && fp2 >= 0) && 0 >= 0) && 0 >= 0) && 0 >= 0
    ((1 >= 0 && m0 >= 0) && m1 >= 0) && 1 == m0 + m1
    ((0 >= 0 && fp0 >= 0) && fp1 >= 0) && 0 == fp0 + fp1
Solved resource constraint after conjoining formulas: SAT
    (>= 2 0)
    (>= 2 0)
    (and (= (+ 0 fp0IntS 0) (+ 0 fp2IntS 0))
     (>= fp0IntS 0)
     (>= fp2IntS 0)
     (>= 0 0)
     (>= 0 0)
     (>= 0 0))
    (and (>= 1 0) (>= m0IntS 0) (>= m1IntS 0) (= 1 (+ m0IntS m1IntS)))
    (and (>= 0 0) (>= fp0IntS 0) (>= fp1IntS 0) (= 0 (+ fp0IntS fp1IntS)))
Matching constructor type
{List {0**A0||0} <Q10 _0> <Q20 _0 _1>|_v == (Nil)|0}
with scrutinee
{List {m0**a||0} <2> <2>|_v == xs|0}
INSTANTIATE <a> . <q2 :: a -> a -> Int> . <q1 :: a -> Int> . {List {1**a||0} <q1 _0> <q2 _0 _1>|_v == (Nil)|0}
INTO {List {1**A2|False|0} <9999> <9999>|_v == (Nil)|0}

 
 Checking Nil :: {List {1**a||0} <0> <0>||0} in
\xs . 
  match xs with
    Nil -> ??
from env with top-level potentials: Emptyset : 0,Nil : 0,xs : 0 fp3
Typing Constraints
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs xs == (Nil) |- {List {1**A2|False|0} <9999> <9999>|_v == (Nil)|0} <: {List {1**a||0} <0> <0>||0}
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs |- {1**A2||0}
    Emptyset Nil xs ~ Emptyset Nil xs fp3
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs |- {1**A1||0}
UNIFY A2 WITH {1**a||0} PRODUCING {1**a|U1|0}
Type assignment
  A0 -> {m0**a||0}
  A2 -> {1**a|U1|0}
Typing Constraints
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs |- {1**A1||0}
Type assignment
  A0 -> {m0**a||0}
  A2 -> {1**a|U1|0}
Pred assignment
  Q10 -> 2
  Q11 -> Q11
  Q20 -> 2
  Q21 -> Q21
Simple Constraints
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs xs == (Nil) |- {1**a|False|0} <: {1**a||0}
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs xs == (Nil) |- 9999 >= 0
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs xs == (Nil) |- 9999 >= 0
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs xs == (Nil) |- {List|False|0} <: {List||0}
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs |- {1**a|U1|0}
    Emptyset Nil xs ~ Emptyset Nil xs fp3
Constraints
  False ==> True
  False ==> True
QMap
  U0 -> {}
  U1 -> {}
Checking consistency
Candidates (1)
  0: [U0 -> {}, U1 -> {}] (2 0)
Remaining Candidates (1)
  0: [U0 -> {}, U1 -> {}] (2 0)

Generating resource constraints:
    9999 >= 0
    9999 >= 0
    (((((0 + fp1) + 0 == (0 + fp3) + 0 && fp1 >= 0) && fp3 >= 0) && 0 >= 0) && 0 >= 0) && 0 >= 0
Solved resource constraint after conjoining formulas: SAT
    (>= 9999 0)
    (>= 9999 0)
    (and (= (+ 0 fp1IntS 0) (+ 0 fp3IntS 0))
     (>= fp1IntS 0)
     (>= fp3IntS 0)
     (>= 0 0)
     (>= 0 0)
     (>= 0 0))
Matching constructor type
{List {1**A1||0} <Q11 _0> <Q21 _0 _1>|_v == (Cons y ys)|0}
with scrutinee
{List {m0**a||0} <2> <2>|_v == xs|0}
INSTANTIATE <a> . x:{1**a||0} -> xs:{List {1**a||0} <1> <0>||0} -> {List {1**a||0} <0> <0>||0}
INTO x3:{1**A3||0} -> x4:{List {1**A3||0} <1> <0>||0} -> {List {1**A3||0} <0> <0>||0}

 
 Checking insert :: x2:_ -> x1:_ -> {List {1**a||0} <0> <0>||0} in
\xs . 
  match xs with
    Cons y ys -> ?? ?? ??
from env with top-level potentials: Emptyset : 0,Nil : 0,xs : 0,y : 0,ys : 0 fp11
Typing Constraints
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- x3:{1**A3||0} -> x4:{List {1**A3||0} <1> <0>||0} -> {List {1**A3||0} <0> <0>||0} /\ x2:_ -> x1:_ -> {List {1**a||0} <0> <0>||0}
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- x3:{1**A3||0} -> x4:{List {1**A3||0} <1> <0>||0} -> {List {1**A3||0} <0> <0>||0} <: x2:_ -> x1:_ -> {List {1**a||0} <0> <0>||0}
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys |- {1**A3||0}
    Emptyset Nil xs y ys fp9 \/
    Emptyset Nil xs y ys 0 || Emptyset Nil xs y ys 0
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- fp9 \/ fp11 || fp12
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- fp7 \/ fp9 || fp10
    Emptyset Nil xs y ys fp5 \/
    Emptyset Nil xs y ys 0 || Emptyset Nil xs y ys 0
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- fp5 \/ fp7 || fp8
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- fp4 \/ fp5 || fp6
    Emptyset Nil xs y ys ~ Emptyset Nil xs y ys fp4
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs |- {1**A1||0}
UNIFY A3 WITH {1**a||0} PRODUCING {1**a|U2|0}
Type assignment
  A0 -> {m0**a||0}
  A1 -> {m0**a||0}
  A2 -> {1**a|U1|0}
  A3 -> {1**a|U2|0}
Typing Constraints
Type assignment
  A0 -> {m0**a||0}
  A1 -> {m0**a||0}
  A2 -> {1**a|U1|0}
  A3 -> {1**a|U2|0}
Pred assignment
  Q10 -> 2
  Q11 -> 2
  Q20 -> 2
  Q21 -> 2
Simple Constraints
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, x3, x4, xs, y, ys xs == (Cons y ys) |- 0 >= 0
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, x3, x4, xs, y, ys xs == (Cons y ys) |- 0 >= 0
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, x1, x2, xs, y, ys xs == (Cons y ys) |- {1**a|False|0} <: {1**a||0}
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, x1, x2, xs, y, ys xs == (Cons y ys) |- 0 >= 0
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, x1, x2, xs, y, ys xs == (Cons y ys) |- 0 >= 0
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, x1, x2, xs, y, ys xs == (Cons y ys) |- {List|False|0} <: {List||0}
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys |- {1**a|U2|0}
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- m2 \/ m8 || m11
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- m3 \/ m9 || m12
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- m4 \/ m10 || m13
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- fp9 \/ fp11 || fp12
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- fp7 \/ fp9 || fp10
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- m1 \/ m2 || m5
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- m0 \/ m3 || m6
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- m0 \/ m4 || m7
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- fp5 \/ fp7 || fp8
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- fp4 \/ fp5 || fp6
    Emptyset Nil xs y ys ~ Emptyset Nil xs y ys fp4
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs |- {m0**a||0}
Constraints
  False ==> True
  False ==> True
QMap
  U0 -> {}
  U1 -> {}
  U2 -> {}
Checking consistency
Candidates (1)
  0: [U0 -> {}, U1 -> {}, U2 -> {}] (2 0)
Remaining Candidates (1)
  0: [U0 -> {}, U1 -> {}, U2 -> {}] (2 0)

Generating resource constraints:
    0 >= 0
    0 >= 0
    0 >= 0
    0 >= 0
    ((m2 >= 0 && m8 >= 0) && m11 >= 0) && m2 == m8 + m11
    ((m3 >= 0 && m9 >= 0) && m12 >= 0) && m3 == m9 + m12
    ((m4 >= 0 && m10 >= 0) && m13 >= 0) && m4 == m10 + m13
    ((fp9 >= 0 && fp11 >= 0) && fp12 >= 0) && fp9 == fp11 + fp12
    ((fp7 >= 0 && fp9 >= 0) && fp10 >= 0) && fp7 == fp9 + fp10
    ((m1 >= 0 && m2 >= 0) && m5 >= 0) && m1 == m2 + m5
    ((m0 >= 0 && m3 >= 0) && m6 >= 0) && m0 == m3 + m6
    ((m0 >= 0 && m4 >= 0) && m7 >= 0) && m0 == m4 + m7
    ((fp5 >= 0 && fp7 >= 0) && fp8 >= 0) && fp5 == fp7 + fp8
    ((fp4 >= 0 && fp5 >= 0) && fp6 >= 0) && fp4 == fp5 + fp6
    (((((((Q11 y + fp1) + 0 == (0 + fp4) + 0 && fp1 >= 0) && fp4 >= 0) && 0 >= 0) && 0 >= 0) && 0 >= 0) && 0 >= 0) && 0 >= 0
Solved resource constraint after conjoining formulas: SAT
    (>= 0 0)
    (>= 0 0)
    (>= 0 0)
    (>= 0 0)
    (and (>= m2IntS 0) (>= m8IntS 0) (>= m11IntS 0) (= m2IntS (+ m8IntS m11IntS)))
    (and (>= m3IntS 0) (>= m9IntS 0) (>= m12IntS 0) (= m3IntS (+ m9IntS m12IntS)))
    (and (>= m4IntS 0) (>= m10IntS 0) (>= m13IntS 0) (= m4IntS (+ m10IntS m13IntS)))
    (and (>= fp9IntS 0)
     (>= fp11IntS 0)
     (>= fp12IntS 0)
     (= fp9IntS (+ fp11IntS fp12IntS)))
    (and (>= fp7IntS 0)
     (>= fp9IntS 0)
     (>= fp10IntS 0)
     (= fp7IntS (+ fp9IntS fp10IntS)))
    (and (>= m1IntS 0) (>= m2IntS 0) (>= m5IntS 0) (= m1IntS (+ m2IntS m5IntS)))
    (and (>= m0IntS 0) (>= m3IntS 0) (>= m6IntS 0) (= m0IntS (+ m3IntS m6IntS)))
    (and (>= m0IntS 0) (>= m4IntS 0) (>= m7IntS 0) (= m0IntS (+ m4IntS m7IntS)))
    (and (>= fp5IntS 0)
     (>= fp7IntS 0)
     (>= fp8IntS 0)
     (= fp5IntS (+ fp7IntS fp8IntS)))
    (and (>= fp4IntS 0)
     (>= fp5IntS 0)
     (>= fp6IntS 0)
     (= fp4IntS (+ fp5IntS fp6IntS)))
    (and (= (+ (Q11IntSIntS yIntS) fp1IntS 0) (+ 0 fp4IntS 0))
     (>= fp1IntS 0)
     (>= fp4IntS 0)
     (>= 0 0)
     (>= 0 0)
     (>= 0 0)
     (>= 0 0)
     (>= 0 0))

 
 Checking y :: {1**A3||-(fp10 + 0)} in
\xs . 
  match xs with
    Cons y ys -> insert ?? ??
from env with top-level potentials: Emptyset : 0,Nil : 0,xs : 0,y : 0,ys : 0 fp12
Typing Constraints
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- {m12**a|_v == y|0} <: {1**A3||-(fp10 + 0)}
Type assignment
  A0 -> {m0**a||0}
  A1 -> {m0**a||0}
  A2 -> {1**a|U1|0}
  A3 -> {1**a|U2|0}
Pred assignment
  Q10 -> 2
  Q11 -> 2
  Q20 -> 2
  Q21 -> 2
Simple Constraints
    Cons, Emptyset, Insert, Nil, Singleton, _v, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- 0 >= -(fp10 + 0)
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- {m12**a|_v == y|0} <: {1**a|U2|0}
Constraints
  _v == y && xs == (Cons y ys) ==> U2
QMap
  U0 -> {}
  U1 -> {}
  U2 -> {}
Checking consistency
Candidates (1)
  0: [U0 -> {}, U1 -> {}, U2 -> {}] (3 0)
Remaining Candidates (1)
  0: [U0 -> {}, U1 -> {}, U2 -> {}] (3 0)

Generating resource constraints:
    0 >= -(fp10 + 0)
Solved resource constraint after conjoining formulas: SAT
    (>= 0 (- (+ fp10IntS 0)))

 
 Checking insert
            y :: x1:_ -> {List {1**a||0} <0> <0>||0} in
\xs . 
  match xs with
    Cons y ys -> ?? ??
from env with top-level potentials: Emptyset : 0,Nil : 0,xs : 0,y : 0,ys : 0 fp7
Typing Constraints
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- x4:{List {1**A3||0} <1> <0>||0} -> {List {1**A3||0} <0> <0>||0} /\ x1:_ -> {List {1**a||0} <0> <0>||0}
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- x4:{List {1**A3||0} <1> <0>||0} -> {List {1**A3||0} <0> <0>||0} <: x1:_ -> {List {1**a||0} <0> <0>||0}
Type assignment
  A0 -> {m0**a||0}
  A1 -> {m0**a||0}
  A2 -> {1**a|U1|0}
  A3 -> {1**a|U2|0}
Pred assignment
  Q10 -> 2
  Q11 -> 2
  Q20 -> 2
  Q21 -> 2
Simple Constraints
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, x4, xs, y, ys xs == (Cons y ys) |- 0 >= 0
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, x4, xs, y, ys xs == (Cons y ys) |- 0 >= 0
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, x1, xs, y, ys xs == (Cons y ys) |- {1**a|False|0} <: {1**a||0}
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, x1, xs, y, ys xs == (Cons y ys) |- 0 >= 0
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, x1, xs, y, ys xs == (Cons y ys) |- 0 >= 0
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, x1, xs, y, ys xs == (Cons y ys) |- {List|False|0} <: {List||0}
Constraints
  False ==> True
  False ==> True
QMap
  U0 -> {}
  U1 -> {}
  U2 -> {}
Checking consistency
Candidates (1)
  0: [U0 -> {}, U1 -> {}, U2 -> {}] (3 0)
Remaining Candidates (1)
  0: [U0 -> {}, U1 -> {}, U2 -> {}] (3 0)

Generating resource constraints:
    0 >= 0
    0 >= 0
    0 >= 0
    0 >= 0
Solved resource constraint after conjoining formulas: SAT
    (>= 0 0)
    (>= 0 0)
    (>= 0 0)
    (>= 0 0)
INSTANTIATE <a> . xs:{List {1**a||0} <2> <2>||0} -[1]-> {List {1**a||0} <0> <0>||0}
INTO x6:{List {1**A4||0} <2> <2>||0} -[1]-> {List {1**A4||0} <0> <0>||0}

 
 Checking insertionSort :: x5:_ -> {List {1**A3||0} <1> <0>||-(fp6 + 0)} in
\xs . 
  match xs with
    Cons y ys -> insert y (?? ??)
from env with top-level potentials: Emptyset : 0,Nil : 0,xs : 0,y : 0,ys : 0 fp15
Typing Constraints
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- x6:{List {1**A4||0} <2> <2>||0} -[1]-> {List {1**A4||0} <0> <0>||0} /\ x5:_ -> {List {1**A3||0} <1> <0>||-(fp6 + 0)}
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- x6:{List {1**A4||0} <2> <2>||0} -[1]-> {List {1**A4||0} <0> <0>||0} <: x5:_ -> {List {1**A3||0} <1> <0>||-(fp6 + 0)}
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- x6:{List {1**A4||0} <0> <0>||0} -> {List {1**A4|False|0} <9999> <9999>|False|0} <: xs:{List {1**a|False|0} <9999> <9999>|False|0} -> {List {1**a||0} <0> <0>||0}
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys |- {1**A4||0}
    Emptyset Nil xs y ys fp13 \/
    Emptyset Nil xs y ys 0 || Emptyset Nil xs y ys 0
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- fp13 \/ fp15 || fp16
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- fp8 \/ fp13 || fp14
UNIFY A4 WITH {1**a|U2|0} PRODUCING {1**a|U3|0}
Type assignment
  A0 -> {m0**a||0}
  A1 -> {m0**a||0}
  A2 -> {1**a|U1|0}
  A3 -> {1**a|U2|0}
  A4 -> {1**a|U3|0}
Typing Constraints
Type assignment
  A0 -> {m0**a||0}
  A1 -> {m0**a||0}
  A2 -> {1**a|U1|0}
  A3 -> {1**a|U2|0}
  A4 -> {1**a|U3|0}
Pred assignment
  Q10 -> 2
  Q11 -> 2
  Q20 -> 2
  Q21 -> 2
Simple Constraints
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, x6, xs, y, ys xs == (Cons y ys) |- {1**a|U3|0} /\ {1**a|U2|0}
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, x6, xs, y, ys xs == (Cons y ys) |- 0 >= 1
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, x6, xs, y, ys xs == (Cons y ys) |- 0 >= 0
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, x5, xs, y, ys xs == (Cons y ys) |- {1**a|U3|0} <: {1**a|U2|0}
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, x5, xs, y, ys xs == (Cons y ys) |- 0 >= 1
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, x5, xs, y, ys xs == (Cons y ys) |- 0 >= 0
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, x5, xs, y, ys xs == (Cons y ys) |- {List|False|0} <: {List||0}
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- {1**a|False|0} <: {1**a|U3|0}
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- 9999 >= 0
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- 9999 >= 0
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- {List|False|0} <: {List||0}
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- {1**a|False|0} <: {1**a||0}
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- 9999 >= 0
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- 9999 >= 0
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- {List|False|0} <: {List||0}
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys |- {1**a|U3|0}
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- m5 \/ m14 || m17
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- m6 \/ m15 || m18
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- m7 \/ m16 || m19
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- fp13 \/ fp15 || fp16
    Cons, Emptyset, Insert, Nil, Singleton, insert, insertionSort, xs, y, ys xs == (Cons y ys) |- fp8 \/ fp13 || fp14
Constraints
  False ==> True
  False ==> True
  False ==> True
  False ==> U3
  False ==> True
  U3 && xs == (Cons y ys) ==> U2
QMap
  U0 -> {}
  U1 -> {}
  U2 -> {}
  U3 -> {}
Checking consistency
  (U2 && U3) && xs == (Cons y ys)
Candidates (1)
  0: [U0 -> {}, U1 -> {}, U2 -> {}, U3 -> {}] (5 0)
Remaining Candidates (1)
  0: [U0 -> {}, U1 -> {}, U2 -> {}, U3 -> {}] (5 0)

Generating resource constraints:
    0 >= 1
    0 >= 0
    0 >= 1
    0 >= 0
    9999 >= 0
    9999 >= 0
    9999 >= 0
    9999 >= 0
    ((m5 >= 0 && m14 >= 0) && m17 >= 0) && m5 == m14 + m17
    ((m6 >= 0 && m15 >= 0) && m18 >= 0) && m6 == m15 + m18
    ((m7 >= 0 && m16 >= 0) && m19 >= 0) && m7 == m16 + m19
    ((fp13 >= 0 && fp15 >= 0) && fp16 >= 0) && fp13 == fp15 + fp16
    ((fp8 >= 0 && fp13 >= 0) && fp14 >= 0) && fp8 == fp13 + fp14
Solved resource constraint after conjoining formulas: UNSAT
    (>= 0 1)
    (>= 0 0)
    (>= 0 1)
    (>= 0 0)
    (>= 9999 0)
    (>= 9999 0)
    (>= 9999 0)
    (>= 9999 0)
    (and (>= m5IntS 0) (>= m14IntS 0) (>= m17IntS 0) (= m5IntS (+ m14IntS m17IntS)))
    (and (>= m6IntS 0) (>= m15IntS 0) (>= m18IntS 0) (= m6IntS (+ m15IntS m18IntS)))
    (and (>= m7IntS 0) (>= m16IntS 0) (>= m19IntS 0) (= m7IntS (+ m16IntS m19IntS)))
    (and (>= fp13IntS 0)
     (>= fp15IntS 0)
     (>= fp16IntS 0)
     (= fp13IntS (+ fp15IntS fp16IntS)))
    (and (>= fp8IntS 0)
     (>= fp13IntS 0)
     (>= fp14IntS 0)
     (= fp8IntS (+ fp13IntS fp14IntS)))
TYPE ERROR: Insufficient resources
when checking insertionSort ::
x5:_ -> {List {1**a||0} <1> <0>||-(fp6 + 0)}
in
\xs . 
  match xs with
    Cons y ys -> insert y
                   (insertionSort ??)
