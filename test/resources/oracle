

append :: xs:{List {1**a||1}||0} -> ys:{List {1**a||0}||0} -> {List {1**a||0}|len _v == len xs + len ys && elems _v == elems xs + elems ys|0}
append = \xs . \ys . 
    match xs with
      Nil -> ys
      Cons z zs -> Cons z (append zs
                             ys)


compress :: xs:{List {1**a||1}||0} -> {List {1**a||0}||0}
./List-Compress-Bad.sq:16: Error:
  Insufficient resources
  when checking ys ::
  {List {1**a||1}|len _v >= 0 && len _v < len xs|0}
  in
  \xs . 
    match xs with
      Cons y ys -> 
        match compress ys with
          Cons z zs -> 
            if y == z
              then compress ys
              else (?? :: {List {1**a||0}||0})


compress :: xs:{List {1**a||1}||0} -> {List {1**a||0}||0}
compress = \xs . 
  match xs with
    Nil -> Nil
    Cons y ys -> 
      match compress ys with
        Nil -> Cons y Nil
        Cons z zs -> 
          if y == z
            then Cons z zs
            else Cons y (Cons z zs)

cons2 :: x:{2**a||2} -> {List {1**a||0}||0}
cons2 = \x . Cons x (Cons x Nil)



delete :: x:{1**a||0} -> xs:{List {1**a||1}||0} -> {List {1**a||0}|elems _v == elems xs - [x]|0}
delete = \x . \xs . 
    match xs with
      Nil -> Nil
      Cons y ys -> 
        if y == x
          then delete x ys
          else Cons y (delete x ys)


double :: xs:{List {1**a||1}||0} -> {List {1**a||0}|len _v == 2 * len xs|0}
./List-Double-Bad.sq:15: Error:
  Insufficient resources
  when checking y :: {1**a||1} in
  \xs . 
    match xs with
      Cons y ys -> Cons y (Cons y ??)


double :: xs:{List {2**a||1}||0} -> {List {1**a||0}|len _v == 2 * len xs|0}
double = \xs . 
  match xs with
    Nil -> Nil
    Cons y ys -> Cons y (Cons y
                           (double ys))



foldr :: <p :: List (a) -> b -> Bool> . f:(xs:{List {1**a||0}||0} -> x:{1**a||0} -> acc:{1**b|p xs _v|0} -> {1**b|p ((Cons x xs)) _v|0}) -> seed:{1**b|p (Nil) _v|0} -> ys:{List {1**a||0}||0} -> {1**b|p ys _v|0}
./List-Fold.sq:19: Error:
  Insufficient resources
  when checking xs ::
  {List {1**a||0}|len _v >= 0 && len _v < len ys|0}
  in
  \f . \seed . \ys . 
        match ys with
          Cons x xs -> f xs x (foldr f
                                 seed xs)


replicate :: n:{Nat||0} -> x:{n**a||n} -> {List {1**a||0}|len _v == n|0}
replicate = \n . \x . 
    if n <= 0
      then Nil
      else Cons x (replicate (dec n)
                     x)


reverse' :: xs:{List {1**a||1}||0} -> acc:{List {1**a||0}||0} -> {List {1**a||0}||0}
reverse' = \xs . \acc . 
    match xs with
      Nil -> acc
      Cons y ys -> reverse' ys (Cons y
                                  acc)

reverse :: xs:{List {1**a||1}||0} -> {List {1**a||0}||0}
reverse = \xs . reverse' xs Nil

