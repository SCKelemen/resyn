data IList where
  Nil :: IList 
  Cons :: x: {Int| |1} -> xs: IList -> IList

-- Multi-argument measure returning the number of elements 
--   in the IList _v that x is greater than

measure numgt :: z: Int -> IList -> {Int| _v >= 0} where 
  Nil -> 0 
  Cons y ys -> 
    if y > z 
      then 1 + (numgt z ys)
      else numgt z ys

insert :: xs: IList -> x: {Int| |numgt _v xs} -> IList  
insert = \x. \xs. 
  match xs with 
    Nil -> Nil
    Cons y ys -> 
      if y <= x
        then Cons y (insert x ys)
        else Cons x (Cons y ys) 