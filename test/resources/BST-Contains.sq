--------------------------------------------------------------------------------
-- Query whether a binary tree contains an element
--------------------------------------------------------------------------------

-- Define a BST using refinement types to enforce strict ordering and no
-- duplicates. Each Node uses 2 potential to represent the two pointers to the
-- left and right subtrees.
data BST a where
  Empty :: BST a
  Node :: x: {1**a| |2} -> l: BST {a | _v < x} -> r: BST {a | x < _v} -> BST a

-- Measure the number of nodes in the tree
termination measure size :: BST a -> {Int | _v >= 0} where
  Empty -> 0
  Node _ l r -> 1 + size l + size r

-- A set of all elements in the tree
measure elems :: BST a -> Set a where
  Empty -> []
  Node x l r -> [x] + elems l + elems r

-- Measure the depth of the tree
measure depth :: BST a -> {Int | _v >= 0} where
  Empty -> 0
  Node _ l r -> 1 + (if depth l > depth r -- TODO is there a way to avoid recomputing depth?
                      then depth l
                      else depth r)

-- A function to check whether an element is inside a BST. Because we are not
-- modifying the tree, we do not consume any multiplicity of x or potential.
contains :: x: {0**a| |0} -> t: BST a -> {Bool | _v == (x in elems t)}
contains = \x. \t.
  match t with
    Empty -> False
    Node y l r -> if x < y
                  then contains x l
                  else if y < x
                       then contains x r
                       else True
