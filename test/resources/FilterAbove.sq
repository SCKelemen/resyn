data IList where
  Nil :: IList 
  Cons :: x: {Int| |2} -> xs: IList -> IList 

-- Measure with more than one argument
-- This is possible when all but the last argument (the relevant Datatype)
--   are constant
measure aboveAll :: z: Int -> IList -> Bool where 
  Nil -> True 
  Cons y ys -> (y >= z) && (aboveAll z ys)

termination measure len :: IList -> {Int | _v >= 0} where 
  Nil -> 0
  Cons x xs -> 1 + (len xs)


-- Simple demonstration of verification using multi-argument measure
filterAbove :: xs: IList -> x: Int -> {IList | aboveAll x _v}
filterAbove = \xs . \x . 
  match xs with 
    Nil -> Nil 
    Cons y ys -> 
      if (y >= x)
        then Cons y (filterAbove ys x)
        else filterAbove ys x