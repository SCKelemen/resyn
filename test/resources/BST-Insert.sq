--------------------------------------------------------------------------------
-- Insert into a binary tree
--------------------------------------------------------------------------------

-- Define a BST using refinement types to enforce strict ordering and no
-- duplicates. Each Node uses 2 potential to represent the two pointers to the
-- left and right subtrees.
data BST a where
  Empty :: BST a
  Node :: x: {1**a| |2} -> l: BST {a | _v < x} -> r: BST {a | x < _v} -> BST a

-- Measure the number of nodes in the tree
termination measure size :: BST a -> {Int | _v >= 0} where
  Empty -> 0
  Node _ l r -> 1 + size l + size r

-- A set of all elements in the tree
measure elems :: BST a -> Set a where
  Empty -> []
  Node x l r -> [x] + elems l + elems r

-- Measure the depth of the tree
measure depth :: BST a -> {Int | _v >= 0} where
  Empty -> 0
  Node _ l r -> 1 + (if depth l > depth r -- TODO is there a way to avoid recomputing depth?
                      then depth l
                      else depth r)

-- Check a function to insert a new element into the tree. We consume 2
-- pontential so that we can insert a node if needed.
insert :: x: {1**a| |2} -> t: BST a -> {BST a | elems _v == elems t + [x]}
insert = \x . \t .
  match t with
    Empty -> Node x Empty Empty
    Node y l r -> if x < y
                  then Node y (insert x l) r
                  else if x == y
                       then Node y l r
                       else Node y l (insert x r)
