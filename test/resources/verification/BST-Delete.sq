--------------------------------------------------------------------------------
-- Delete from a binary search tree
--------------------------------------------------------------------------------

-- Define a BST using refinement types to enforce strict ordering and no
-- duplicates. Each Node uses 2 potential to represent the two pointers to the
-- left and right subtrees.
data BST a where
  Empty :: BST a
  Node :: x: {1**a| |2} -> l: BST {a | _v < x} -> r: BST {a | x < _v} -> BST a

-- Measure the number of nodes in the tree
termination measure size :: BST a -> {Int | _v >= 0} where
  Empty -> 0
  Node _ l r -> 1 + size l + size r

-- A set of all elements in the tree
measure elems :: BST a -> Set a where
  Empty -> []
  Node x l r -> [x] + elems l + elems r

-- Measure how many steps down the tree to an empty right branch.
measure pathRight :: BST a -> {Int | _v >= 0} where
  Empty -> 0
  Node y l r -> 1 + pathRight r

-- The number of steps needed to delete the given element from the tree.
measure deleteCost :: x: a -> BST a -> {Int | _v >= 0} where
  Empty -> 0
  Node y l r -> if x < y
                then 1 + deleteCost x l
                else if y < x
                     then 1 + deleteCost x r
                     else 1 + pathRight l -- We have found the node to delete,
                                          -- now we must replace it with its
                                          -- children

-- Helper function to append two trees into one. We just stick t2 into the
-- rightmost empty branch of t1.
-- TODO: Annotate that all elems of t1 < all elems of t2
append :: t1: {BST a | | pathRight _v}
       -> t2: BST a
       -> {BST a | size _v == size t1 + size t2 && elems _v == elems t1 + elems t2}

-- Delete a node from a BST. Because the refinement types guarantee that the
-- element is in the input tree, we know that we will delete one node. This
-- means we can restore 2 potential, representing the node we freed.
delete :: x: a
       -> t: {BST a | x in elems _v | deleteCost x _v}
       -> {BST a | !(x in elems _v) && size _v == size t - 1}
delete = \x. \t.
  match t with
    Empty -> error -- Should be impossible given refinements
    Node y l r -> if y < x
                  then Node y l (delete x r)
                  else if x < y
                       then Node y (delete x l) r
                       else append l r
