qualifier {x == y, x != y}

-- Simple model of list memory semantics:
--   Constructing an element of a list requires enough heap space 
--   for the polymorphic type and a pointer to the next one.
--   We assume Nil requires no memory
data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a
  
termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs  

measure elems :: List a -> Set a where
  Nil -> []
  Cons x xs -> [x] + elems xs

-- Requires enough memory resources to traverse xs onces
delete :: x: a -> xs: List {a| |0} -[1]-> {List a | elems _v == elems xs - [x]}
delete = \x. \xs.
  match xs with
    Nil -> Nil
    Cons y ys -> 
      if y == x
        then delete x ys 
        else Cons y (delete x ys)