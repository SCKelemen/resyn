--------------------------------------------------------------------------------
-- Query whether a binary tree contains an element -- SHOULD FAIL
--------------------------------------------------------------------------------

-- Define a BST using refinement types to enforce strict ordering and no
-- duplicates. Each Node uses 2 potential to represent the two pointers to the
-- left and right subtrees.
data BST a where
  Empty :: BST a
  Node :: x: {1**a| |2} -> l: BST {a | _v < x} -> r: BST {a | x < _v} -> BST a

-- Measure the number of nodes in the tree
termination measure size :: BST a -> {Int | _v >= 0} where
  Empty -> 0
  Node _ l r -> 1 + size l + size r

-- A set of all elements in the tree
measure elems :: BST a -> Set a where
  Empty -> []
  Node x l r -> [x] + elems l + elems r

-- The length of the path to where this element is stored in the tree, or where
-- it would be stored if inserted.
measure pathTo :: x: a -> BST a -> {Int | _v >= 0} where
  Empty -> 0
  Node y l r -> if x < y
                then 1 + pathTo x l
                else if y < x
                     then 1 + pathTo x r
                     else 0

-- A function to check whether an element is inside a BST. Since we do not
-- modify the tree, the only cost is that of traversal.
contains :: x: a -> t: BST {(if x < _v then 1 else 0) ** a | | 2} -> {Bool | _v == (x in elems t)}
contains = \x. \t.
  match t with
    Empty -> False
    Node y l r -> if x < y
                  then contains x l
                  else if y < x
                       then contains x r
                       else True
