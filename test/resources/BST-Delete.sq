--------------------------------------------------------------------------------
-- Delete from a binary search tree
--------------------------------------------------------------------------------

-- Define a BST using refinement types to enforce strict ordering and no
-- duplicates. Each Node uses 2 potential to represent the two pointers to the
-- left and right subtrees.
data BST a where
  Empty :: BST a
  Node :: x: {1**a| |2} -> l: BST {a | _v < x} -> r: BST {a | x < _v} -> BST a

-- Measure the number of nodes in the tree
termination measure size :: BST a -> {Int | _v >= 0} where
  Empty -> 0
  Node _ l r -> 1 + size l + size r

-- A set of all elements in the tree
measure elems :: BST a -> Set a where
  Empty -> []
  Node x l r -> [x] + elems l + elems r

-- Measure the depth of the tree
measure depth :: BST a -> {Int | _v >= 0} where
  Empty -> 0
  Node _ l r -> 1 + (if depth l > depth r -- TODO is there a way to avoid recomputing depth?
                      then depth l
                      else depth r)

-- Delete a node from a BST. Because the refinement types guarantee that the
-- element is in the input tree, we know that we will delete one node. This
-- means we can restore 2 potential, representing the node we freed.
delete :: x: {0**a| |0}
       -> t: {BST a | x in elems _v}
       -> {BST a | !(x in elems _v) && size _v == size t - 1 |2}
delete = \x. \t.
  match t with
    Empty -> error -- Should be impossible given refinements
    Node y l r -> if y < x
                  then Node y l (delete x r)
                  else if x < y
                       then Node y (delete x l) r
                       else match l with
                              Empty -> r
                              Node z zl zr -> Node z zl (delete x (Node y zr r))
