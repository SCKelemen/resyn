delete :: t:{BST {1**a||0}||0} -> x:{1**a||0} -> {BST {1**a||0}|telems _v == telems t - [x]|0}
delete = \t . \x . 
    match t with
      Empty -> t
      Node x4 x5 x6 -> 
        if (x4 != x) && (x4 <= x)
          then Node x4 x5 (delete x6 x)
          else t

insert :: x:{1**a||0} -> t:{BST {1**a||0}||0} -> {BST {1**a||0}|telems _v == telems t + [x]|0}
insert = \x . \t . 
    match t with
      Empty -> Node x Empty Empty
      Node x7 x8 x9 -> 
        if (x <= x7) && (x7 <= x)
          then t
          else x8

member :: x:{1**a||0} -> t:{BST {1**a||0}||0} -> {Bool|_v == (x in telems t)|0}
member = \x . \t . true

append :: xs:{List {1**a||0}||0} -> ys:{List {1**a||0}||0} -> {List {1**a||0}|len _v == len xs + len ys && elems _v == elems xs + elems ys|0}
append = \xs . \ys . 
    match xs with
      Nil -> ys
      Cons x7 x8 -> Cons x7 (append x8
                               ys)

compress :: xs:{List {1**a||0}||0} -> {CList {1**a||0}|elems _v == elems xs|0}
compress = \xs . 
  match xs with
    Nil -> Nil
    Cons x3 x4 -> 
      match x4 with
        Nil -> Cons x3 Nil
        Cons x10 x11 -> 
          if x3 == x10
            then compress x4
            else xs

cons2 :: x:{2**a||2} -> {List {1**a||0}|elems _v == [x] && len _v == 2|0}
cons2 = \x . Cons x (Cons x Nil)

delete :: x:{1**a||0} -> xs:{List {1**a||0}||0} -> {List {1**a||0}|elems _v == elems xs - [x]|0}
delete = \x . \xs . 
    match xs with
      Nil -> xs
      Cons x3 x4 -> 
        if x3 == x
          then delete x x4
          else xs

double :: xs:{List {1**a||0}||0} -> {List {1**a||0}|len _v == 2 * len xs && elems _v == elems xs|0}
double = \xs . 
  match xs with
    Nil -> xs
    Cons x3 x4 -> Cons x3 (Cons x3
                             (double x4))

insert :: x:{1**a||0} -> xs:{IList {1**a||0}||0} -> {IList {1**a||0}|ielems _v == ielems xs + [x]|0}
insert = \x . \xs . 
    match xs with
      INil -> ICons x INil
      ICons x5 x6 -> 
        if (x <= x5) && (x5 <= x)
          then xs
          else x6

replicate :: n:{Nat||0} -> x:{1**a||0} -> {List {1**a||0}|len _v == n|0}
replicate = \n . \x . Nil

reverse :: <p :: a -> a -> Bool> . xs:{List {1**a||0} <p>||0} -> {List {1**a||0} <p _1 _0>|len _v == len xs && elems _v == elems xs|0}
reverse = \xs . 
  match xs with
    Nil -> Nil
    Cons x3 x4 -> snoc x3 (reverse
                             x4)

