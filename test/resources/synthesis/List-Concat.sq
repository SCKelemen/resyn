data List a where
  Nil :: List a
  Cons :: x: a -> xs: List a -> List a
    
termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs  
  
data ListOfLists a where
  Nil2 :: ListOfLists a
  Cons2 :: x: List a -> xs: ListOfLists a -> ListOfLists a
  
termination measure len2 :: ListOfLists a -> {Int | _v >= 0} where
  Nil2 -> 0
  Cons2 x xs -> 1 + len2 xs
  
measure sumLen :: ListOfLists a -> {Int | _v >= 0} where
  Nil2 -> 0
  Cons2 x xs -> sumLen xs + len x

zappend :: xs: List {a| |1} -> ys: List a -> { List a | len _v == len xs + len ys }

concat :: acc: List a -> xss: ListOfLists {a| |1} -> { List a | len _v == sumLen xss + len acc }
concat = ?? 

-- Linear solution: append acc (concat x4 x3)
-- Quadratic: concat x4 (append acc x3)
-- Also linear (in reality) but quadratic to the solver: concat x4 (append x3 acc) 