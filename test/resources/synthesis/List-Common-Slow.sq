data List a  where 
  Nil :: List a 
  Cons :: x: a -> xs: List a -> List a

termination measure len :: List a -> {Int | _v >= 0} where 
  Nil -> 0 
  Cons x xs -> 1 + len xs

measure elems :: List a -> Set a where 
  Nil -> []
  Cons x xs -> [x] + elems xs

member :: x: a -> xs: List {1 ** a | | 1} -> {Bool | _v == (x in (elems xs))}

common :: l1: List a -> l2: List a -> {List a | elems _v == (elems l1 * elems l2)}
common = ??