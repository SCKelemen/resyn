data IList a  where 
  INil :: IList a 
  ICons :: x: a -> xs: IList {a | x <= _v } -> IList a 

termination measure ilen :: IList a -> {Int | _v >= 0} where 
  INil -> 0 
  ICons x xs -> 1 + ilen xs

measure ielems :: IList a -> Set a where 
  INil -> []
  ICons x xs -> [x] + ielems xs

data List a where
  Nil :: List a 
  Cons :: x: a -> xs: List a -> List a

termination measure len :: List a -> {Int | _v >= 0} where 
  Nil -> 0
  Cons x xs -> 1 + len xs

measure elems :: List a -> Set a where 
  Nil -> []
  Cons x xs -> [x] + elems xs

lessthan :: x: {0 ** a} -> y: {0 ** a} -> {Bool | _v == (x < y)}
member :: x: a -> xs: IList {1 ** a | | 1} -> {Bool | _v == (x in (ielems xs))}

common :: l1: IList a -> l2: IList a -> {List a | elems _v == (ielems l1 * ielems l2)}
common = \l1. \l2.
  match l1 with
    INil -> Nil
    ICons x xs -> 
      match l2 with 
        INil -> Nil 
        ICons y ys ->
          if lessthan x y
            then common xs l2
            else if y < x 
                then common l1 ys
                else Cons x (common xs ys)

