--------------------------------------------------------------------------------
-- Double the size of a binary search tree
--------------------------------------------------------------------------------

-- Define a BST using refinement types to enforce ordering. We will allow
-- duplicates in this BST. Each Node uses 2 potential to represent the two
-- pointers to the left and right subtrees.
data BST a where
  Empty :: BST a
  Node :: x: {1**a| |2} -> l: BST {a | _v <= x} -> r: BST {a | x < _v} -> BST a

-- Measure the number of nodes in the tree
termination measure size :: BST a -> {Int | _v >= 0} where
  Empty -> 0
  Node _ l r -> 1 + size l + size r

-- A set of all elements in the tree
measure elems :: BST a -> Set a where
  Empty -> []
  Node x l r -> [x] + elems l + elems r

-- Measure the depth of the tree
measure depth :: BST a -> {Int | _v >= 0} where
  Empty -> 0
  Node _ l r -> 1 + (if depth l > depth r -- TODO is there a way to avoid recomputing depth?
                      then depth l
                      else depth r)

-- Double the size of the tree. We add a copy of each node to itself as its left
-- child, thus creating a tree that is twice the size and still in order.
--
--        A                       A
--       / \       becomes       / \
--      B   C                   A   \
--                             /    C
--                            B    /
--                           /    C
--                          B
--
-- Because we are doubling the size of the tree, we must consume 2n potential
-- and multiplicity 2**a
replicate :: t: BST {2**a| |2} -> {BST a | elems _v == elems t && size _v == 2 * size t}
replicate = \t.
  match t with
    Empty -> Empty
    Node x l r -> Node x (Node x (replicate l) Empty) (replicate r)
