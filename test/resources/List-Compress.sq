data List a where
  Nil :: List a
  Cons :: x: {1 * a| |1} -> xs: List a -> List a

termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs 

compress :: xs: List {1 * a| |1} -> List a
compress = \xs.
  match xs with
    Nil -> Nil 
    Cons y ys -> 
      match compress ys with 
        Nil -> Cons y Nil 
        Cons z zs -> 
          if y == z
            then compress ys
            else Cons y (Cons z zs)