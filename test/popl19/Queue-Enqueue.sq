data List a where
  Nil :: List a
  Cons :: x: a -> xs: List a -> List a

termination measure llen :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + llen xs

-- A set of all elements in a list
measure lelems :: List a -> Set a where
  Nil -> []
  Cons x xs -> [x] + lelems xs

-- A queue implemented as a pair of lists, one as the front and the other as the
-- reverse of the rear. The queue's potential is 2 * the length of the rear.
data Queue a where
  Queue :: f: List a -> b: List a -> Queue a

-- Measure the length of a queue
termination measure qlen :: Queue a -> {Int | _v >= 0} where
  Queue f b -> llen f + llen b

-- A set of all elements in a queue
measure qelems :: Queue a -> Set a where
  Queue f b -> lelems f + lelems b

-- Measure the length of the front of the queue. This corresponds to how many
-- times we can call dequeue before paying for another reversal.
measure frontLen :: Queue a -> {Int | _v >= 0} where
  Queue f b -> llen f

-- Measure the length of the rear of the queue. This corresponds to how
-- expensive a reversal will be.
measure rearLen :: Queue a -> {Int | _v >= 0} where
  Queue f b -> llen b

-- Add an element to the back of the queue. This operation takes 1 step and adds
-- 2 potential to the queue.
enqueue :: x: a -> q: Queue a -> {Queue a | qelems _v == qelems q + [x] && qlen _v == qlen q + 1}
enqueue = ?? 