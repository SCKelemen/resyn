data Pair a where
  Pair :: a -> a -> Pair a

data List a <q :: Int> where
  Nil  :: List a <q>
  Cons :: a -> List {a | | q} <q> -> List a <q>

split :: <q :: Int>. <p :: Int>. List {a | | 1 + p} <{q}> -> Pair (List {a| |p} <{q}>)
split = \xs. 
  match xs with
    Nil       -> Pair Nil Nil
    Cons y ys -> 
      match split ys with 
        Pair u v -> Pair (Cons y v) u

cmp :: a -> a -[1]-> Bool

merge :: List {a | | 1} <{0}> -> List {a | | 1} <{0}> -> List a <{0}> 
merge = \ps. \qs.
  match ps with
    Nil       -> qs
    Cons x xs ->
      match qs with
        Nil       -> ps
        Cons y ys -> 
          if cmp x y
            then Cons x (Cons y (merge xs ys))
            else Cons y (Cons x (merge xs ys))


mergeSort :: List {a | | 2} <{5}> -> List a <{0}>
mergeSort = \xs.
  match xs with
    Nil       -> Nil
    Cons y ys ->   
      match ys with
        Nil       -> Cons y Nil
        Cons z zs ->
          match split xs with
            Pair u v -> merge (mergeSort u) (mergeSort v)
