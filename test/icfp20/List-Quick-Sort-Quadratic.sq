data Pair a where
  Pair :: a -> a -> Pair a

data List a <q :: Int> where
  Nil :: List a <q>
  Cons :: a -> List {a | | q} <q> -> List a <q>

partition :: a -> List {a | | 1} <{1}> -[1]-> Pair (List a <{1}>)
partition = \p. \xs. 
  match xs with
    Nil -> Pair Nil Nil
    Cons y ys -> 
      match partition p ys with
        Pair ls gs -> 
          if y <= p
            then Pair (Cons y ls) gs
            else Pair ls (Cons y gs)

pivotAppend :: a -> List {a | | 1} <{0}> -> List a <{0}> -> List a <{0}>
pivotAppend = \p. \xs. \ys.
  match xs with
    Nil -> Cons p ys
    Cons z zs -> Cons z (pivotAppend p zs ys)

quickSort :: xs: List {a | | 2} <{2}> -[1]-> List a <{0}>
quickSort = \xs. 
  match xs with
    Nil -> Nil
    Cons y ys ->
      match partition y ys with
        Pair ls gs -> pivotAppend y (quickSort ls) (quickSort gs)
