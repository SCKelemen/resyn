all :: <p :: a -> Bool> . arg1:(x:{1**a||0} -> {Bool|_v == p x|0}) -> arg0:{List {1**a|p _v|0}||0} -> {Bool|_v|0}
all = \f . \xs . 
    match xs with
      Nil -> True
      Cons y ys -> and (f y) (all f
                                ys)

allPos :: {Bool|_v|0}
allPos = all (\x . x > 0) (Cons
                             1 (Cons 2 (Cons 3 Nil)))

notAllPos :: {Bool|_v|0}
./HigherOrder.sq:32: Error:
  Cannot find sufficiently strong refinements
  when checking x > 0 ::
  {Bool|_v == True|0} in
  \x . x > 0

client :: xs:{List {Nat||0}||0} -> {List {Int|_v == 0|0}||0}
client = \xs . filterLE 0 xs

clientBad :: xs:{List {Int||0}||0} -> ys:{List {Nat||0}||0} -> {List {Int|_v == 0|0}||0}
./TypeAbduction.sq:27: Error:
  Cannot find sufficiently strong refinements
  when checking xs ::
  {List {Int|_v >= 0|0}||0} in
  \xs . \ys . filterLE1 0 xs ??

./Instantiation.sq:12: Resolution Error:
  Constructor Zero must return type {Natural {1**n||0}||0}, got {Natural {Z||0}||0}

./Measure.sq:6: Error:
  Cannot find sufficiently strong refinements
  when checking 1 + (len xs) ::
  {Int|_v < 0|0} in
  \arg0 . 
    match arg0 with
      Cons x xs -> 1 + (len xs)

map1 :: f:(arg0:{1**a||0} -> {1**b||0}) -> xs:{List {1**a||0}||0} -> {List {1**b||0}|len _v == len xs|0}
map1 = \f . \xs . 
    match xs with
      Nil -> Nil
      Cons x3 x4 -> Cons (f x3) (map1
                                   f x4)

map2 :: f:(arg0:{1**a||0} -> {1**b||0}) -> xs:{List {1**a||0}||0} -> {List {1**b||0}|len _v == len xs|0}
map2 = \f . \xs . 
    match xs with
      Nil -> Nil
      Cons x3 x4 -> Cons (f x3) (map2
                                   f x4)

map3 :: f:(arg0:{1**a||0} -> {1**b||0}) -> xs:{List {1**a||0}||0} -> {List {1**b||0}|len _v == len xs|0}
map3 = \f . \xs . 
    match xs with
      Nil -> Nil
      Cons x3 x4 -> 
        let f0 = f in
        Cons (f x3) (map3 f0 x4)

map4 :: f:(arg0:{1**a||0} -> {1**b||0}) -> xs:{List {1**a||0}||0} -> {List {1**b||0}|len _v == len xs|0}
map4 = \f . \xs . 
    let f0 = f in
    
    match xs with
      Nil -> Nil
      Cons x3 x4 -> Cons (f x3) (map4
                                   f0 x4)

map5 :: f:(arg0:{1**a||0} -> {1**b||0}) -> xs:{List {1**a||0}||0} -> {List {1**b||0}|len _v == len xs|0}
./HOChecking.sq:40: Error:
  Not in scope: f

filterAbove :: xs:{IList||0} -> x:{Int||0} -> {IList|aboveAll x _v|0}
filterAbove = \xs . \x . 
    match xs with
      Nil -> Nil
      Cons y ys -> 
        if y >= x
          then Cons y (filterAbove ys x)
          else filterAbove ys x

filterBetween :: xs:{IList||0} -> lo:{Int||0} -> hi:{Int||0} -> {IList|between lo hi _v|0}
./MultiArgMeasure.sq:34: Error:
  Cannot find sufficiently strong refinements
  when checking Cons y
                  (filterBetween ys lo hi) ::
  {IList|between lo hi _v|0} in
  \xs . \lo . \hi . 
        match xs with
          Cons y ys -> 
            if (y >= lo) && (y <= hi)
              then Cons y (filterBetween ys lo
                             hi)
              else
                (?? :: {IList|between lo hi _v|0})

