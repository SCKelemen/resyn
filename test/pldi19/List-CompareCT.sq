-- Constant time (# of recursive calls) length comparison
data SList a where
	Nil :: SList a
	Cons :: x: a -> xs: SList {a | x <= _v} -> SList a
  
termination measure len :: SList a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs 

measure elems :: SList a -> Set a where 
  Nil -> [] 
  Cons x xs -> [x] + elems xs

false :: {Bool | _v == False}
true :: {Bool | _v == True}
and :: x: Bool -> y: Bool -> {Bool | _v == (x && y)}

-- Constant time version
compare :: xs: SList {a| |1} -> ys: SList a -[1]-> {Bool | _v == (len xs == len ys)}
compare = ?? 