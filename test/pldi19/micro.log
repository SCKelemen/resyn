List-Insert
insert :: x:{1**a||0} -> xs:{IList {1**a||1}||0} -[1]-> {IList {1**a||0}|ielems _v == ielems xs + [x]|0}
insert = \x . \xs . 
    match xs with
      INil -> ICons x INil
      ICons x5 x6 -> 
        if x5 <= x
          then ICons x5 (insert x x6)
          else ICons x (insert x5 x6)

(Goals: 3)
(Measures: 2)
(Spec size: 11)
(Solution size: 57)
(Number of resource constraints: 172)
List-Insert-Fine-Alt
insert :: x:{1**a||0} -> xs:{IList {1**a||if x > _v then 1 else 0}||0} -[1]-> {IList {1**a||0}|ielems _v == ielems xs + [x]|0}
insert = \x . \xs . 
    match xs with
      INil -> ICons x INil
      ICons y ys -> 
        if x > y
          then ICons y (insert x ys)
          else ICons x (ICons y ys)

(Goals: 3)
(Measures: 2)
(Spec size: 11)
(Solution size: 57)
(Number of resource constraints: 123)
List-InsertCT
insert :: x:{1**a||0} -> xs:{IList {1**a||1}||0} -[1]-> {IList {1**a||0}|ielems _v == ielems xs + [x]|0}
insert = \x . \xs . 
    match xs with
      INil -> ICons x INil
      ICons x5 x6 -> 
        if x5 <= x
          then ICons x5 (insert x x6)
          else ICons x (insert x5 x6)

(Goals: 3)
(Measures: 2)
(Spec size: 11)
(Solution size: 57)
(Number of resource constraints: 186)
List-LenCompareCT
compare' :: xs:{List {1**a||1}||0} -> ys:{List {1**a||0}||0} -[1]-> {Bool|_v == (len xs == len ys)|0}
compare' = \xs . \ys . 
    match xs with
      Nil -> 
        match ys with
          Nil -> true
          Cons x5 x6 -> false
      Cons x9 x10 -> 
        match ys with
          Nil -> false
          Cons x13 x14 -> compare' x10 x14

(Goals: 2)
(Measures: 1)
(Spec size: 10)
(Solution size: 27)
(Number of resource constraints: 156)
List-LenCompare
List-Replicate
replicate :: n:{Nat||0} -> x:{n**a||n} -[1]-> {List {1**a||0}|len _v == n|0}
replicate = \n . \x . 
    if n <= 0
      then Nil
      else Cons x (replicate (dec n)
                     x)

(Goals: 2)
(Measures: 1)
(Spec size: 7)
(Solution size: 31)
(Number of resource constraints: 45)
List-Append3
append3 :: xs:{List {1**a||3}||0} -> ys:{List {1**a||2}||0} -[1]-> zs:{List {1**a||0}||0} -> {List {1**a||0}|len _v == (len xs + len ys) + len zs && elems _v == (elems xs + elems ys) + elems zs|0}
append3 = \xs . \ys . \zs .
      append ys (append xs zs)

(Goals: 3)
(Measures: 2)
(Spec size: 26)
(Solution size: 36)
(Number of resource constraints: 51)
List-Intersect
List-Range
range :: lo:{Int||0} -> hi:{Int|_v >= lo|_v - lo} -[1]-> {IList {Int|lo <= _v && _v <= hi|0}|ilen _v == hi - lo|0}
range = \lo . \hi . 
    if lo >= hi
      then INil
      else ICons lo (range (inc lo)
                       hi)

(Goals: 3)
(Measures: 2)
(Spec size: 19)
(Solution size: 44)
(Number of resource constraints: 36)
List-Pairs
List-Compress
compress :: xs:{List {1**a||0}||0} -> {CList {1**a||0}|elems _v == elems xs|0}
compress = \xs . 
  match xs with
    Nil -> Nil
    Cons x3 x4 -> 
      match compress x4 with
        Nil -> Cons x3 Nil
        Cons x11 x12 -> 
          if x3 == x11
            then x6
            else Cons x3 (Cons x11 x12)

(Goals: 4)
(Measures: 3)
(Spec size: 11)
(Solution size: 60)
(Number of resource constraints: 193)
List-Triple1
triple :: xs:{List {1**a||2}||0} -> {List {1**a||0}|len _v == (len xs + len xs) + len xs|0}
triple = \xs . append xs (append
                            xs xs)

(Goals: 3)
(Measures: 2)
(Spec size: 14)
(Solution size: 34)
(Number of resource constraints: 66)
List-Triple2
triple :: xs:{List {1**a||2}||0} -> {List {1**a||0}|len _v == (len xs + len xs) + len xs|0}
triple = \xs . 
  match xs with
    Nil -> Nil
    Cons x3 x4 -> append (append xs
                            x4) (Cons x3 xs)

(Goals: 3)
(Measures: 2)
(Spec size: 14)
(Solution size: 41)
(Number of resource constraints: 93)
