List-Insert-Fine
List-InsertCT
insert :: x:{1**a||0} -> xs:{IList {1**a||1}||0} -[1]-> {IList {1**a||0}|ielems _v == ielems xs + [x]|0}
insert = \x . \xs . 
    match xs with
      INil -> ICons x INil
      ICons x5 x6 -> 
        if x5 <= x
          then ICons x5 (insert x x6)
          else ICons x (ICons x5 x6)

(Goals: 3)
(Measures: 2)
(Spec size: 11)
(Solution size: 57)
(Number of resource constraints: 69)
List-LenCompareCT
compare' :: xs:{List {1**a||1}||0} -> ys:{List {1**a||0}||0} -[1]-> {Bool|_v == (len xs == len ys)|0}
compare' = \xs . \ys . 
    match xs with
      Nil -> 
        match ys with
          Nil -> true
          Cons x5 x6 -> false
      Cons x9 x10 -> 
        match ys with
          Nil -> false
          Cons x13 x14 -> compare' x10 x14

(Goals: 2)
(Measures: 1)
(Spec size: 10)
(Solution size: 27)
(Number of resource constraints: 28)
List-LenCompare
List-Replicate
List-Append3
append3 :: xs:{List {1**a||3}||0} -> ys:{List {1**a||2}||0} -[1]-> zs:{List {1**a||0}||0} -> {List {1**a||0}|len _v == (len xs + len ys) + len zs && elems _v == (elems xs + elems ys) + elems zs|0}
append3 = \xs . \ys . \zs .
      append ys (append xs zs)

(Goals: 3)
(Measures: 2)
(Spec size: 26)
(Solution size: 36)
(Number of resource constraints: 27)
