List-Insert-Fine-Alt
insert :: x:{1**a||0} -> xs:{IList {1**a||if x > _v then 1 else 0}||0} -[1]-> {IList {1**a||0}|ielems _v == ielems xs + [x]|0}
insert = \x . \xs . 
    match xs with
      INil -> ICons x INil
      ICons x5 x6 -> 
        if x > x5
          then ICons x5 (insert x x6)
          else ICons x (insert x5 x6)

(Goals: 3)
(Measures: 2)
(Spec size: 11)
(Solution size: 57)
(Number of resource constraints: 125)
List-Insert
insert :: x:{1**a||0} -> xs:{IList {1**a||1}||0} -[1]-> {IList {1**a||0}|ielems _v == ielems xs + [x]|0}
insert = \x . \xs . 
    match xs with
      INil -> ICons x INil
      ICons x5 x6 -> 
        if x5 <= x
          then ICons x5 (insert x x6)
          else ICons x (insert x5 x6)

(Goals: 3)
(Measures: 2)
(Spec size: 11)
(Solution size: 57)
(Number of resource constraints: 186)
List-Replicate
replicate :: n:{Nat||0} -> x:{n**a||n} -[1]-> {List {1**a||0}|len _v == n|0}
replicate = \n . \x . 
    if n <= 0
      then Nil
      else Cons x (replicate (dec n)
                     x)

(Goals: 2)
(Measures: 1)
(Spec size: 7)
(Solution size: 31)
(Number of resource constraints: 54)
List-Range
range :: lo:{Int||0} -> hi:{Int|_v >= lo|_v - lo} -[1]-> {IList {Int|lo <= _v && _v <= hi|0}|ilen _v == hi - lo|0}
range = \lo . \hi . 
    if lo >= hi
      then INil
      else ICons lo (range (inc lo)
                       hi)

(Goals: 3)
(Measures: 2)
(Spec size: 19)
(Solution size: 44)
(Number of resource constraints: 49)
List-InsertCT
insert :: x:{1**a||0} -> xs:{IList {1**a||1}||0} -[1]-> {IList {1**a||0}|ielems _v == ielems xs + [x]|0}
insert = \x . \xs . 
    match xs with
      INil -> ICons x INil
      ICons x5 x6 -> 
        if x5 <= x
          then ICons x5 (insert x x6)
          else ICons x (insert x5 x6)

(Goals: 3)
(Measures: 2)
(Spec size: 11)
(Solution size: 57)
(Number of resource constraints: 200)
List-LenCompareCT
compare' :: xs:{List {1**a||1}||0} -> ys:{List {1**a||0}||0} -[1]-> {Bool|_v == (len xs == len ys)|0}
compare' = \xs . \ys . 
    match xs with
      Nil -> 
        match ys with
          Nil -> true
          Cons x5 x6 -> false
      Cons x9 x10 -> 
        match ys with
          Nil -> false
          Cons x13 x14 -> compare' x10 x14

(Goals: 2)
(Measures: 1)
(Spec size: 10)
(Solution size: 27)
(Number of resource constraints: 162)
List-LenCompare
compare' :: xs:{List {1**a||1}||0} -> ys:{List {1**a||0}||0} -[1]-> {Bool|_v == (len xs == len ys)|0}
compare' = \xs . \ys . 
    match xs with
      Nil -> 
        match ys with
          Nil -> true
          Cons x5 x6 -> false
      Cons x9 x10 -> 
        match ys with
          Nil -> false
          Cons x13 x14 -> compare' x10 x14

(Goals: 2)
(Measures: 1)
(Spec size: 10)
(Solution size: 27)
(Number of resource constraints: 155)
