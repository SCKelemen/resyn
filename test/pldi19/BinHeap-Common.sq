leq :: x: a -> y: a -> {Bool | _v == (x <= y)}
neq :: x: a -> y: a -> {Bool | _v == (x != y)}

data Heap a where
	Empty :: Heap a
	Node :: x: a -> l: Heap {a | _v > x} -> r: Heap {a | _v > x} -> Heap a
                                                                              
termination measure size :: Heap a -> {Int | _v >= 0} where
  Empty -> 0
  Node x l r -> 1 + size l + size r  
  
measure elems :: Heap a -> Set a where
  Empty -> []
  Node x l r -> elems l + elems r + [x]

member :: x: a -> h: Heap a -> {Bool | _v == (x in elems h)}
insert :: t: Heap a -> x: a -> {Heap a | elems _v == elems t + [x]}
qualifier { x < y }

common :: g: Heap a -> h: Heap a -> {Heap a | elems _v == elems g * elems h}
common = ??